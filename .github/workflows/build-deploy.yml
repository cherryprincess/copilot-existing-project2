name: Build and Deploy to AKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_NAME: flask-app
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: flask-app-namespace

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate required secret
      run: |
        if [ -z "${{ secrets.AZURE_CONTAINER_REGISTRY }}" ]; then
          echo "ERROR: AZURE_CONTAINER_REGISTRY secret is not set"
          echo "Please add your ACR URL (e.g., myregistry.azurecr.io) to GitHub secrets"
          exit 1
        fi
        if [ -z "${{ secrets.REGISTRY_USERNAME }}" ]; then
          echo "ERROR: REGISTRY_USERNAME secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
          echo "ERROR: REGISTRY_PASSWORD secret is not set"
          exit 1
        fi
        echo "All required secrets are configured"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        install: true

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=build-${{ github.run_number }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image locally
      id: build-local
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.IMAGE_NAME }}:build-${{ github.run_number }}
        platforms: linux/amd64

    - name: Install Trivy
      run: |
        sudo apt-get update && \
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release && \
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - && \
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list && \
        sudo apt-get update && \
        sudo apt-get install -y trivy

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:build-${{ github.run_number }}
        format: table
        exit-code: 0
        ignore-unfixed: true
        severity: CRITICAL
      continue-on-error: true

    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:build-${{ github.run_number }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      if: always()

    - name: Push Docker image to registry
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate deployment secrets
      run: |
        if [ -z "${{ secrets.AKS_CLUSTER_NAME }}" ]; then
          echo "ERROR: AKS_CLUSTER_NAME secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AKS_RESOURCE_GROUP }}" ]; then
          echo "ERROR: AKS_RESOURCE_GROUP secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "ERROR: AZURE_CREDENTIALS secret is not set"
          exit 1
        fi
        echo "All deployment secrets are configured"

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Get AKS credentials
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        # Replace image tag in deployment file
        sed -i "s|image: flask-app:secure|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.run_number }}|g" k8s-complete-deployment.yaml
        
        # Replace namespace in deployment file
        sed -i "s|namespace: flask-app-namespace|namespace: ${{ env.NAMESPACE }}|g" k8s-complete-deployment.yaml
        
        # Apply the deployment
        kubectl apply -f k8s-complete-deployment.yaml

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/flask-app-deployment -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}

    - name: Run deployment tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=ready pod -l app=flask-app -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Test the service
        kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -n ${{ env.NAMESPACE }} -- curl -f http://flask-app-service/

    - name: Run performance tests (optional)
      run: |
        # Port forward for local testing
        kubectl port-forward service/flask-app-service 8080:80 -n ${{ env.NAMESPACE }} &
        PF_PID=$!
        
        # Wait for port forward to be ready
        sleep 10
        
        # Basic performance test
        echo "Running basic performance test..."
        for i in {1..10}; do
          curl -f http://localhost:8080/ || echo "Request $i failed"
          sleep 1
        done
        
        # Clean up port forward
        kill $PF_PID || true
      continue-on-error: true

    - name: Clean up old images (optional)
      run: |
        # Keep only last 5 images
        az acr repository show-tags --name ${REGISTRY%%.azurecr.io} --repository ${{ env.IMAGE_NAME }} --orderby time_desc --output tsv | tail -n +6 | xargs -I {} az acr repository delete --name ${REGISTRY%%.azurecr.io} --image ${{ env.IMAGE_NAME }}:{} --yes || true
