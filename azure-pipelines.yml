trigger:
  branches:
    include:
    - main
    - develop

pr:
  branches:
    include:
    - main

variables:
  imageRepository: 'flask-app'
  containerRegistry: 'your-registry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'build-$(Build.BuildNumber)'
  aksClusterName: 'your-aks-cluster'
  aksResourceGroup: 'your-resource-group'
  namespace: 'flask-app-namespace'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(containerRegistry)
        tags: |
          $(tag)
          latest

    - task: AquaSecurityTrivy@0
      displayName: 'Run Trivy vulnerability scanner'
      inputs:
        image: '$(containerRegistry)/$(imageRepository):$(tag)'
        options: '--exit-code 0 --severity HIGH,CRITICAL'

    - task: PublishTestResults@2
      displayName: 'Publish Trivy scan results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*trivy-report.xml'
        failTaskOnFailedTests: false
      condition: always()

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create namespace
            inputs:
              action: deploy
              kubernetesServiceConnection: 'your-aks-service-connection'
              namespace: $(namespace)
              manifests: |
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: $(namespace)

          - task: replacetokens@3
            displayName: Replace tokens in deployment files
            inputs:
              rootDirectory: '$(Pipeline.Workspace)'
              targetFiles: '**/k8s-complete-deployment.yaml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'your-aks-service-connection'
              namespace: $(namespace)
              manifests: |
                $(Pipeline.Workspace)/k8s-complete-deployment.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: KubernetesManifest@0
            displayName: Check deployment status
            inputs:
              action: deploy
              kubernetesServiceConnection: 'your-aks-service-connection'
              namespace: $(namespace)
              manifests: |
                $(Pipeline.Workspace)/k8s-complete-deployment.yaml
              rolloutStatusTimeout: 600

          - task: Kubernetes@1
            displayName: Run deployment tests
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'your-aks-service-connection'
              namespace: $(namespace)
              command: 'run'
              arguments: 'test-pod --image=curlimages/curl:latest --rm -i --restart=Never -- curl -f http://flask-app-service/'
